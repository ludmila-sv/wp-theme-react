// rems helpers
/**
 * $val is rem value in assumption that it's calculated with base of rems(1)=10px
 * it returns value with rems(1) =16px (which is default in browsers)
 * Primarily use this function to get value which can be used in calculation in scss, still read about rems() usage below.
 */
@function rem($val){
	@return $val * 0.625rem;
}

/**
 * Use this function instead of rem() only for font: 400 rems(12)/1.5 $font;
 * Because scss interperts /1.5 in setting line height as division and
 * performs calculation if rem() used instead of rems() - this function casts value to string explicitly.
 * as alternative we can use #{rem(10)} notation -> also this notation should be used in css calc() expressions.
 */
@function rems($val){
	@return #{$val * 0.625}rem;
}

/// Map deep get
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
	@each $key in $keys {
		$map: map-get($map, $key);
	}
	@return $map;
}

/// Deep set function to set a value in nested maps
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map}
@function map-deep-set($map, $keys, $value) {
	$maps: ($map,);
	$result: null;

	// If the last key is a map already
	// Warn the user we will be overriding it with $value
	@if type-of(nth($keys, -1)) == "map" {
		@warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
	}

	// If $keys is a single key
	// Just merge and return
	@if length($keys) == 1 {
		@return map-merge($map, ($keys: $value));
	}

	// Loop from the first to the second to last key from $keys
	// Store the associated map to this key in the $maps list
	// If the key doesn't exist, throw an error
	@for $i from 1 through length($keys) - 1 {
		$current-key: nth($keys, $i);
		$current-map: nth($maps, -1);
		$current-get: map-get($current-map, $current-key);
		@if $current-get == null {
			@error "Key `#{$key}` doesn't exist at current level in map.";
		}
		$maps: append($maps, $current-get);
	}

	// Loop from the last map to the first one
	// Merge it with the previous one
	@for $i from length($maps) through 1 {
		$current-map: nth($maps, $i);
		$current-key: nth($keys, $i);
		$current-val: if($i == length($maps), $value, $result);
		$result: map-merge($current-map, ($current-key: $current-val));
	}

	// Return result
	@return $result;
}

// Replace letters
@function str-replace( $string, $search, $replace: '' ) {
	$index: str-index( $string, $search );

	@if $index {
		@return str-slice( $string, 1, $index - 1 ) + $replace +
			str-replace(
				str-slice( $string, $index + str-length( $search ) ),
				$search,
				$replace
			);
	}

	@return $string;
}

// Encode symbols
@function url-encode( $string ) {
	$map: (
		'%': '%25',
		'<': '%3C',
		'>': '%3E',
		' ': '%20',
		'!': '%21',
		'*': '%2A',
		"'": '%27',
		'"': '%22',
		'(': '%28',
		')': '%29',
		';': '%3B',
		':': '%3A',
		'@': '%40',
		'&': '%26',
		'=': '%3D',
		'+': '%2B',
		'$': '%24',
		',': '%2C',
		'/': '%2F',
		'?': '%3F',
		'#': '%23',
		'[': '%5B',
		']': '%5D',
	);

	$new: $string;

	@each $search, $replace in $map {
		$new: str-replace( $new, $search, $replace );
	}

	@return $new;
}

/**
 * Function to make svg-load postcss-inlinde-svg plugin working in SCSS
 *
 * Usage:
 *   background-image: svg-load('../path/to/file.svg', '#FILLCO', '#STROKE');
 *
 * Default directory to search images: src/icons
 */
@function svg-load( $url, $fill: '', $stroke: '' ) {
	@if ( $fill and $stroke ) {
		@return unquote(
				'svg-load("#{$url}", fill: #{$fill}, stroke: #{$stroke})'
		);
	} @else if( $fill ) {
		@return unquote( 'svg-load("#{$url}", fill: #{$fill}' );
	} @else if( $stroke ) {
		@return unquote( 'svg-load("#{$url}", stroke: #{$stroke})' );
	}

	@return unquote( 'svg-load("#{$url}"' );
}

@mixin inline-svg-bg( $svg-string ) {
	background-image: url( 'data:image/svg+xml;charset=utf-8,#{url-encode($svg-string)}' );
}
